#! /usr/bin/env python
# -*- coding: utf-8 -*-

"""Simulate alignments with varying degrees of pairwise epistasis
"""
import numpy as np
import os
import sconsutils
from SCons.Script import Environment, AddOption, GetOption, File, Command, \
                         Flatten
from nestly import Nest
from nestly.scons import SConsWrap
import os
import pathlib
sconsutils

# Set up SCons environment
environ = os.environ.copy()
env = Environment(ENV=environ)
Decider('timestamp-match')

# command line arguments
AddOption('--treepath',
          type='str',
          metavar='<PATH>',
          help='path to tree used for simulation')
treepath = GetOption('treepath')

AddOption('--configpath',
          type='str',
          metavar='<PATH>',
          help='path to config file used for simulation')
configpath = GetOption('configpath')

AddOption('--revpath',
          type='str',
          metavar='<PATH>',
          help='path to RevBayes if not in $PATH (default "rb")',
          default='rb')
revpath = GetOption('revpath')

AddOption('--replicates',
          type='int',
          metavar='<N>',
          help='N replicates in each grid cell (default 1)',
          default=1)
replicates = GetOption('replicates')

AddOption('--output',
          type='str',
          metavar='<PATH>',
          help='output directory path (default "scons_output")',
          default='scons_output')
output = GetOption('output')

nest = SConsWrap(Nest(), output, alias_environment=env)

# check that RevBayes path is valid by attempting to access its help
rb_check = Command(f'{output}/scons.log',
                   None,
                   f'{revpath} -h > $TARGET')

# aggregators perform analysis on a nest
# these will collect the summary stat matrices
nest.add_aggregate('mi_agg', list)
nest.add_aggregate('G93_agg', list)
nest.add_aggregate('pv_agg', list)
nest.add_aggregate('st_agg', list)
nest.add_aggregate('pi_agg', list)
nest.add_aggregate('converge_agg', list)
nest.add_aggregate('distance_agg', list)
nest.add_aggregate('mi_pvalue_agg', list)


# nests define parameter sweeps
nest.add('d', (0, 0, 0.5, 2, 8, 1000))
nest.add('n_iid', range(0, 404, 16))
n_epi_range = np.array(range(0, 404, 16))
if any(n_epi_range % 2 != 0):
    raise ValueError('n_epi must be even!')
nest.add('n_epi', lambda c: n_epi_range if c['n_iid'] else n_epi_range[1:])
nest.add('replicate', range(1, replicates + 1))

# a random seed for each grid cell will be needed for rev
seed_dict = {(cell[1]['d'], cell[1]['n_iid'], cell[1]['n_epi'],
              cell[1]['replicate']): seed for seed, cell in enumerate(nest, 1)}


@nest.add_target()
def alns(outdir, c):
    '''iid and epistatic alignments'''
    seed = seed_dict[(c["d"], c["n_iid"], c["n_epi"], c["replicate"])]
    return env.SRun([f'{outdir}/iid_aln.nex',
                     f'{outdir}/epi_aln.nex'],
                    None,
                    f'{revpath} simulation_scripts/simulate_alns.Rev --args '
                    f'{c["n_iid"]} {c["n_epi"]} {c["d"]} {seed} {outdir} '
                    f'{treepath} {configpath} > '
                    f'{outdir}/alns.log')
    env.Depends(alns, rb_check)
    return alns


@nest.add_target()
def aln(outdir, c):
    '''concatentate the iid and epistatic alignments into one'''
    return env.Command(f'{outdir}/aln.nex',
                       c['alns'],
                       'Rscript simulation_scripts/merge_alns.R '
                       '$SOURCES $TARGET '
                       f' > {outdir}/merge_alns.log')


@nest.add_target()
def trees(outdir, c):
    '''MCMC tree inference'''
    seed = seed_dict[(c["d"], c["n_iid"], c["n_epi"], c["replicate"])]
    return env.SRun([f'{outdir}/stochastic_variables_run_1.log',
                     f'{outdir}/stochastic_variables_run_2.log'],
                    c['aln'],
                    f'{revpath} analysis_scripts/run_analysis.Rev --args '
                    f'{seed} $SOURCES {outdir} > {outdir}/trees.log '
                    f'&& rm {outdir}/stochastic_variables.log')


# calc summary stats
@nest.add_target()
def convergence(outdir, c):
    '''convergence checks'''
    converge = env.SRun([f'{outdir}/diagnose_convergence.tsv',
                        f'{outdir}/diagnose_convergence.log'],
                        c['trees'],
                        f'Rscript analysis_scripts/diagnose_convergence.R '
                        '$SOURCES 1> ${TARGETS[0]} 2> ${TARGETS[1]}')
    c['converge_agg'].append({'d': c['d'], 'n_iid': c['n_iid'],
                              'n_epi': c['n_epi'], 'tgt': converge})
    return converge


@nest.add_target()
def tree_distance(outdir, c):
    '''distance between true and tree posterior'''
    distance = env.SRun(f'{outdir}/tree_distance.tsv',
                        c['trees'],
                        f'Rscript analysis_scripts/tree_distances.R $SOURCES '
                        f' {treepath} > $TARGET')
    c['distance_agg'].append({'d': c['d'], 'n_iid': c['n_iid'],
                              'n_epi': c['n_epi'], 'tgt': distance})
    return distance


@nest.add_target()
def pps(outdir, c):
    '''alignment simulations from the posteior'''
    seed = seed_dict[(c["d"], c["n_iid"], c["n_epi"], c["replicate"])]
    pps = env.SRun([f'{outdir}/PPS/posterior_predictive_sim_{n}/seq.nex'
                    for n in range(1, 103)],
                   [c['aln'], c['trees']],
                   f'Rscript analysis_scripts/run_PPS.R {seed} $SOURCES {outdir} {revpath}')
    return pps


@nest.add_target()
def pps_mi(outdir, c):
    '''calc mi for pps aln'''
    mi_list = []
    for i, aln in enumerate(c['pps']):
        mi_list.append(env.SRun(f'{str(aln)}.mi.summary.tsv',
                                aln,
                                'python indices/align_mi.py $SOURCES'))
    pps_mi_fname = f'{outdir}/PPS/pps_mi.tsv'
    env.Textfile(pps_mi_fname, [str(x[0]) for x in mi_list])
    env.Depends(pps_mi_fname, c['pps'])
    env.Depends(pps_mi_fname, mi_list)
    return pps_mi_fname


@nest.add_target()
def mi(outdir, c):
    '''column mutual information matrix summary stats'''
    mi = env.SRun(f'{outdir}/aln.nex.mi.summary.tsv',
                  c['aln'],
                  'python indices/align_mi.py $SOURCES')
    c['mi_agg'].append({'d': c['d'], 'n_iid': c['n_iid'], 'n_epi': c['n_epi'],
                        'tgt': mi})
    return mi


@nest.add_target()
def pps_mi_pvalue(outdir, c):
    '''calc mi pvalue for pps aln'''
    pps_mi_pvalue = env.SRun(f'{outdir}/aln.nex.mi.summary.pvalue.csv',
                             [c['pps_mi'], c['mi']],
                             f'python indices/pps_pvalue.py $SOURCES --pc 1')
    c['mi_pvalue_agg'].append({'d': c['d'], 'n_iid': c['n_iid'],
                               'n_epi': c['n_epi'], 'tgt': pps_mi_pvalue})
    return pps_mi_pvalue


@nest.add_target()
def pi(outdir, c):
    '''proportion invariant sites summary stats'''
    pi = env.SRun(f'{outdir}/aln.nex.pi.summary.tsv',
                  c['aln'],
                  'Rscript indices/alnSummaries.R $SOURCES')
    c['pi_agg'].append({'d': c['d'], 'n_iid': c['n_iid'], 'n_epi': c['n_epi'],
                        'tgt': pi})
    return pi


@nest.add_target()
def G93(outdir, c):
    '''multinomial likelihood summary stat from Goldman (1993)'''
    G93 = env.SRun(f'{outdir}/aln.nex.G93.summary.tsv',
                   c['aln'],
                   'Rscript indices/goldman_yang_1993.R $SOURCE $TARGET')
    c['G93_agg'].append({'d': c['d'], 'n_iid': c['n_iid'],
                         'n_epi': c['n_epi'], 'tgt': G93})
    return G93


# pop to the top level to aggregate
nest.pop('d')


# create input tsv with file paths
@nest.add_target()
def mi_agg_input(outdir, c):
    '''some scons ninjutsu for building a file of mi paths w/ associated args
    '''
    # first the header line
    lines = ['d\tn_iid\tn_epi\tpath']
    for mi in c['mi_agg']:
        lines.append(f"{mi['d']}\t{mi['n_iid']}\t{mi['n_epi']}"
                     f"\t{File(mi['tgt'][0])}")
    mi_input = env.Textfile(f'{outdir}/mi_agg.input.tsv', lines)
    env.Depends(mi_input, Flatten(mi['tgt']))
    return mi_input


@nest.add_target()
def mi_pvalue_agg_input(outdir, c):
    '''some scons ninjutsu for building a file of mi pvalue paths w/ associated args
    '''
    # first the header line
    lines = ['d\tn_iid\tn_epi\tpath']
    for mi_pvalue in c['mi_pvalue_agg']:
        lines.append(f"{mi_pvalue['d']}\t{mi_pvalue['n_iid']}"
                     f"\t{mi_pvalue['n_epi']}\t{File(mi_pvalue['tgt'][0])}")
    mi_pvalue_input = env.Textfile(f'{outdir}/mi_pvalue_agg.input.tsv', lines)
    env.Depends(mi_pvalue_input, Flatten(mi_pvalue['tgt']))
    return mi_pvalue_input


@nest.add_target()
def pi_agg_input(outdir, c):
    '''some scons ninjutsu for building a file of pi paths w/ associated args
    '''
    # first the header line
    lines = ['d\tn_iid\tn_epi\tpath']
    for pi in c['pi_agg']:
        lines.append(f"{pi['d']}\t{pi['n_iid']}\t{pi['n_epi']}"
                     f"\t{File(pi['tgt'][0])}")
    pi_input = env.Textfile(f'{outdir}/pi_agg.input.tsv', lines)
    env.Depends(pi_input, Flatten(pi['tgt']))
    return pi_input


@nest.add_target()
def G93_agg_input(outdir, c):
    '''some scons ninjutsu for building a file of G93 paths w/ associated args
    '''
    # first the header line
    lines = ['d\tn_iid\tn_epi\tpath']
    for mi in c['G93_agg']:
        lines.append(f"{mi['d']}\t{mi['n_iid']}\t{mi['n_epi']}"
                     f"\t{File(mi['tgt'][0])}")
    G93_input = env.Textfile(f'{outdir}/G93_agg.input.tsv', lines)
    env.Depends(G93_input, Flatten(mi['tgt']))
    return G93_input


@nest.add_target()
def converge_agg_input(outdir, c):
    '''some scons ninjutsu for building a file of converge paths w/ associated args
    '''
    # first the header line
    lines = ['d\tn_iid\tn_epi\tpath']
    for converge in c['converge_agg']:
        lines.append(f"{converge['d']}\t{converge['n_iid']}"
                     f"\t{converge['n_epi']}\t{File(converge['tgt'][0])}")
    converge_input = env.Textfile(f'{outdir}/converge_agg.input.tsv', lines)
    env.Depends(converge_input, Flatten(converge['tgt']))
    return converge_input


@nest.add_target()
def distance_agg_input(outdir, c):
    '''some scons ninjutsu for building a file of distance paths w/ associated args
    '''
    # first the header line
    lines = ['d\tn_iid\tn_epi\tpath']
    for distance in c['distance_agg']:
        lines.append(f"{distance['d']}\t{distance['n_iid']}"
                     f"\t{distance['n_epi']}\t{File(distance['tgt'][0])}")
    distance_input = env.Textfile(f'{outdir}/distance_agg.input.tsv', lines)
    env.Depends(distance_input, Flatten(distance['tgt']))
    return distance_input


# aggregate stats
@nest.add_target()
def mi_agg(outdir, c):
    '''aggregate mutual infomation matrices'''
    mi_agg = env.SRun(f'{outdir}/agg_skewness.pdf',
                      c['mi_agg_input'],
                      f'python utils/stats_agg.py $SOURCE {outdir}')
    env.Depends(mi_agg, [x['tgt'] for x in c['mi_agg']])
    return mi_agg


@nest.add_target()
def mi_pvalue_agg(outdir, c):
    '''aggregate mutual infomation pvalue matrices'''
    mi_pvalue_agg = env.SRun(f'{outdir}/agg_skewness_pvalue.pdf',
                             c['mi_pvalue_agg_input'],
                             f'python utils/stats_agg.py $SOURCE {outdir}')
    env.Depends(mi_pvalue_agg, [x['tgt'] for x in c['mi_pvalue_agg']])
    return mi_pvalue_agg


@nest.add_target()
def pi_agg(outdir, c):
    '''aggregate prop invar matrices'''
    pi_agg = env.SRun(f'{outdir}/agg_PI.pdf',
                      c['pi_agg_input'],
                      f'python utils/stats_agg.py $SOURCE {outdir}')
    env.Depends(pi_agg, [x['tgt'] for x in c['pi_agg']])
    return pi_agg


@nest.add_target()
def G93_agg(outdir, c):
    '''aggregate Goldman (1993) multinomial likelihood matrices'''
    G93_agg = env.SRun(f'{outdir}/agg_G93.pdf',
                       c['G93_agg_input'],
                       f'python utils/stats_agg.py $SOURCE {outdir}')
    env.Depends(G93_agg, [x['tgt'] for x in c['G93_agg']])
    return G93_agg


@nest.add_target()
def converge_agg(outdir, c):
    '''aggregate convergence matrices'''
    converge_agg = env.SRun(f'{outdir}/agg_asdsf.pdf',
                            c['converge_agg_input'],
                            f'python utils/stats_agg.py $SOURCE {outdir}')
    env.Depends(converge_agg, [x['tgt'] for x in c['converge_agg']])
    return converge_agg


@nest.add_target()
def distance_agg(outdir, c):
    '''aggregate distance matrices'''
    distance_agg = env.SRun(f'{outdir}/agg_rf.min.pdf',
                            c['distance_agg_input'],
                            f'python utils/stats_agg.py $SOURCE {outdir}')
    env.Depends(distance_agg, [x['tgt'] for x in c['distance_agg']])
    return distance_agg
